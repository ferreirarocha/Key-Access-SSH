#!/bin/bash
# Name: acesso.ssh
# Author: Marcos Ferreira da Rocha
# E-Mail: marcos.fr.rocha@gmail.com

# Este script envia automatiza a geração e inserção de chave  pública em um servidor ssh.
# Para ficar mais comodo envie esse arquivo para o diretório /usr/bin
# Uso 
# acesso vyos vyos@192.168.1.1


# Criando arquivos de funcao
	FILE=~/.functions
	if [ ! -f $FILE ]; then
           touch ~/.functions
	fi

# Funcao

	shell=$(echo $SHELL)

          if [[ "$shell" == *"bash"* ]] ;then
			funcao=$(grep -q 'source ~/.functions' ~/.bashrc && echo $?)
				if [ "$funcao" != "0" ]; then
					echo "source ~/.functions" >> ~/.bashrc
				fi
          elif [[ "$shell" == *"zsh"* ]] ;then
                      funcao=$(grep -q 'source ~/.functions' ~/.zshrc && echo $?)
	                        if [ "$funcao" != "0" ]; then
        		         	echo "source ~/.functions" >> ~/.zshrc
				fi
          else
                  echo "sem shell"
          fi

RETVAL=0

	case "$1" in
   	"")
		echo -e "\nPor favor registre o novo host seguindo o padrão abaixo \n"
		echo -e "acesso -a namehost user@192.168.0.1\n"

	RETVAL=1
		;;
	new-key|n|-n)

		ssh-keygen
	;;
	add|-a|a)
	if [[ ! -z "$2"  &&  ! -z "$3" ]]; then 

	# Criando o par de chaves
#		SSH
		chave=~/.ssh/key-acesso.rsa
		if [ ! -f $chave ]; then
			ssh-keygen -t rsa -N '' -f "$chave"
		fi

#		Enviando a chave pública para o servidor
		ssh-copy-id  -i "$chave".pub "$3"

#		Adicionado a função no arquivo .bashrc para facilitar a  autenticaçaõ, o exec $SHELL recarrega a sessaõ para utilizar a nova  função.

		echo "$2() { ssh -i "$chave" "$3"; }" >>  ~/.functions ; exec $SHELL
	else
		echo -e "Formato incorreto\n"
		echo -e "Use o padrao"
		echo -e	"acesso vyos vyos@192.168.1."
	fi
	;;
	--list|-l)
		echo ""
		cat ~/.functions | sed -e 's/()/  |  /'| sed -e 's/{//' | sed -e 's/}//' | sed -e 's/;/ /'  | sed -e 's/   //'
		echo "" 
	;;
	--edit|-e)
		nano ~/.functions
	esac

exit $RETVAL
